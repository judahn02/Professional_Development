
// =========================
// Variables
// =========================

// Session data (fallback until REST loads)
let sessions = [
  { date: "3/14/2025", title: "ASL Conference 1", type: "Workshops", hours: 8 },
  { date: "2/15/2025", title: "Advanced Fingerspelling", type: "Training", hours: 4 },
  { date: "1/20/2025", title: "Deaf Culture Seminar", type: "Conference", hours: 6 },
  { date: "12/10/2024", title: "Teaching Methods Workshop", type: "Workshops", hours: 5 }
];

let currentFilter = "all";
let currentSearch = "";

// =========================
// Function definitions
// =========================

const toDateOnly = d => (typeof d === "string" ? d.split("T")[0] : "");
const minutesToHours = m => Math.round((Number(m || 0) / 60) * 100) / 100; // 2-dec float

async function loadMemberSessions() {
  const url = `${PDMembers.root}${PDMembers.route}?members_id=${encodeURIComponent(PDMembers.id)}`;
  const res = await fetch(url, { headers: { "X-WP-Nonce": PDMembers.nonce } });
  if (!res.ok) throw new Error(`REST ${res.status}: ${await res.text()}`);
  const data = await res.json();
  return Array.isArray(data.sessions) ? data.sessions : [];
}

// Initialize the page
async function init() {
+  try {
+    const apiSessions = await loadMemberSessions(); // fetch from REST
+    if (Array.isArray(apiSessions) && apiSessions.length) {
+      // Map API fields -> UI shape
+      sessions = apiSessions.map(s => ({
+        date:  toDateOnly(s['Date']),
+        title: s['Title'] ?? '',
+        type:  s['Session Type'] ?? '',
+        hours: minutesToHours(s['Length']),
+        ceuCapable: (s['CEU Capable'] === true || s['CEU Capable'] === 'True'),
+        ceuWeight:  s['CEU Weight'] ?? '',
+        parentEvent: s['Parent Event'] ?? '',
+        eventType:  s['Event Type'] ?? ''
+        // sessionId:  s['Session Id'],
+        // membersId:  s['Members_id'],
+      }));
+    }
+  } catch (e) {
+    console.warn('[PD] Using default sessions due to REST error:', e);
+  }
+  calculateHours(1);
+  renderSessions();
+}
+
+// Calculate total hours
+function calculateHours(years = 1) {
+  const totalHours = sessions.reduce((sum, session) => sum + (Number(session.hours) || 0), 0);
+  const currentDate = new Date();
+  const cutoffDate = new Date();
+  cutoffDate.setFullYear(currentDate.getFullYear() - years);
+
+  const yearHours = sessions
+    .filter(s => new Date(s.date) >= cutoffDate)
+    .reduce((sum, session) => sum + (Number(session.hours) || 0), 0);
+
+  const totalEl = document.getElementById('totalHours');
+  const filteredEl = document.getElementById('filteredHours');
+  if (totalEl) totalEl.textContent = totalHours;
+  if (filteredEl) filteredEl.textContent = yearHours;
+  document.getElementById('yearHours')?.remove(); // remove static one if still exists
+}
+
+// Filter sessions based on search and filter
+function getFilteredSessions() {
+  const q = (currentSearch || '').toLowerCase();
+  const f = (currentFilter || 'all').toLowerCase();
+  return sessions.filter(session => {
+    const matchesSearch = String(session.title || '').toLowerCase().includes(q);
+    const matchesFilter = f === 'all' || String(session.type || '').toLowerCase() === f;
+    return matchesSearch && matchesFilter;
+  });
+}
+
+// Render sessions table
+function renderSessions() {
+  const filteredSessions = getFilteredSessions();
+  const tbody = document.getElementById('sessionsTable');
+  const emptyState = document.getElementById('emptyState');
+  if (!tbody) return;
+
+  if (filteredSessions.length === 0) {
+    tbody.innerHTML = '';
+    if (emptyState) emptyState.style.display = 'block';
+    return;
+  }
+
+  if (emptyState) emptyState.style.display = 'none';
+  tbody.innerHTML = filteredSessions.map(session => `
+    <tr>
+      <td>${session.date}</td>
+      <td class="font-semibold">${session.title}</td>
+      <td><span class="badge">${session.type}</span></td>
+      <td class="text-primary font-bold">${session.hours}h</td>
+      <td>${session.ceuCapable ? 'Yes' : 'No'}</td>
+      <td>${session.ceuWeight}</td>
+      <td>${session.parentEvent}</td>
+      <td>${session.eventType}</td>
+    </tr>
+  `).join('');
+}
+
+// Handle search input
+function filterSessions() {
+  const el = document.getElementById('searchInput');
+  currentSearch = el ? el.value : '';
+  renderSessions();
+}
+
+// Handle filter buttons
+function setFilter(filter) {
+  currentFilter = filter;
+  document.querySelectorAll('[data-filter]').forEach(btn => {
+    if (btn.dataset.filter === filter) {
+      btn.className = 'btn btn-primary btn-sm';
+    } else {
+      btn.className = 'btn btn-sm';
+    }
+  });
+  renderSessions();
+}
+
+// Export report function
+function exportReport() {
+  const data = sessions.map(session =>
+    `${session.date}\t${session.title}\t${session.type}\t${session.hours}h`
+  ).join('\n');
+
+  const csvContent = 'Date\tSession Title\tType\tHours\n' + data;
+  const blob = new Blob([csvContent], { type: 'text/csv' });
+  const url = window.URL.createObjectURL(blob);
+  const a = document.createElement('a');
+  a.href = url;
+  a.download = 'aslta-training-report.csv';
+  a.click();
+  window.URL.revokeObjectURL(url);
+}
+
+// =========================
+// Hook up DOM + run init
+// =========================
+
+document.addEventListener('DOMContentLoaded', () => {
+  // Run initial data load + render
+  init();
+
+  // Slider wiring (years range)
+  const yearRange = document.getElementById('yearRange');
+  const yearLabel = document.getElementById('yearLabel');
+  if (yearRange) {
+    const applyRange = () => {
+      const val = parseInt(yearRange.value, 10) || 1;
+      if (yearLabel) yearLabel.textContent = String(val);
+      calculateHours(val);
+    };
+    yearRange.addEventListener('input', applyRange);
+    applyRange(); // set initial label + filtered hours
+  }
+});
